// TOKENS

// Identificadores 
IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/

// Numero
NUMBER: /[0-9]+/ | /[0-9]+\.[0-9]+/  | /-[0-9]+/  | /-[0-9]+\.[0-9]+/

// Literales
STRING : /"([^"\\]|\\.)*"/
CHAR   : /'([^'\\]|\\.)'/

// Operadores aritméticos
ARITH_OP: "+" | "-" | "*" | "/" | "%"

// Operadores de comparación
COMPARISON_OP: "==" | "!=" | "<=" | ">=" | "<" | ">"

// Operadores lógicos
LOGICAL_OP: "&&" | "||" | "!"

// Operadores de asignación
ASSIGN_OP: "=" 
         | "+=" | "-=" | "*=" | "/=" | "%=" 
         | "&=" | "|=" | "^=" 
         | "<<=" | ">>="

// Operadores de incremento/decremento 
INC_OP: "++"
DEC_OP: "--"

// Punctuator
LPAR      : "("
RPAR      : ")"
LBRACE    : "{"
RBRACE    : "}"
LBRACK    : "["
RBRACK    : "]"
SEMI      : ";"
COMMA     : ","

// Comentarios 
COMMENT   : /\/\/[^\n]*/
MULTILINE_COMMENT: "/*" /(.|[\r\n])*?/ "*/"

%ignore COMMENT
%import common.WS
%ignore WS
%ignore MULTILINE_COMMENT


// SENTENCIAS                  

// Inicio
start: stmt*                       -> program

// Sentencias generales
stmt: var_decl
     | assign_stmt
     | if_stmt
     | expr_stmt
     | block

// Declaración de variable
var_decl: "var" IDENTIFIER (ASSIGN_OP expr)? SEMI   -> var_declaration

// Asignación 
assign_stmt: IDENTIFIER ASSIGN_OP expr SEMI       -> assign

// Expresion simple
expr_stmt: expr SEMI                               -> expr_statement

// If / If-Else
if_stmt: "if" LPAR expr RPAR stmt ("else" stmt)?   -> if_statement


// Llaves
block: LBRACE stmt* RBRACE                          -> block


// EXPRESIONES 

//  Expresiones generales
expr: expr LOGICAL_OP expr      -> logical_op
     | expr COMPARISON_OP expr   -> comparison_op
     | expr ARITH_OP expr        -> arithmetic_op
     | unary_expr                -> unary_expression
     | atom

// Operador unario
unary_expr: (LOGICAL_OP | "-" | INC_OP | DEC_OP) expr   -> unary_op

// Atomicos
atom: NUMBER                                 -> number
     | STRING                                 -> string
     | CHAR                                   -> char
     | IDENTIFIER                             -> variable
     | IDENTIFIER LPAR (arg_list)? RPAR       -> func_call
     | LPAR expr RPAR                         -> parentheses

// Lista de argumentos
arg_list: expr (COMMA expr)*

